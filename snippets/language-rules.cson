'.source.classicalb.rules':
  'RULE ...':
    'prefix': 'RULE ...'
    'body': '''
RULE ${1:name}
RULEID ${2:id1}
DEPENDS_ON_COMPUTATION compute_y
DEPENDS_ON_RULE rule1
BODY
  substitution
END
'''
  'FOR... ':
    'prefix': 'for'
    'body': 'FOR ${1:name} IN ${2:set}\n\tDO \n\t${3:substitution}\n\tEND'
  'RULE_FORALL':
    'prefix': 'rule forall'
    'body':'''
RULE_FORALL ${1:x}
WHERE
  ${2: x : 1..10 }
EXPECT
  ${3:x > 0}
COUNTEREXAMPLE
  STRING_FORMAT("Value ~w is not greater than zero", x)
END//RULE_FORALL
'''
  'COMPUTATION':
    'prefix': 'COMPUTATION ...'
    'body':'''
COMPUTATION ${1:compute_x}
DEPENDS_ON_COMPUTATION compute_y
DEPENDS_ON_RULE rule1
BODY
  DEFINE
    def
  TYPE
    POW(INTEGER)
  VALUE
    UNION(x).(x : 1..10 | {x + x })
  END//DEFINE
END//COMPUTATION
'''
  'RULE_ANY':
    'prefix': 'RULE_ANY'
    'body':'''
RULE_ANY
  x
WHERE
  x : 1..10
  & x : 9..20
COUNTEREXAMPLE
  STRING_FORMAT("value ~w", x)
END//RULE_ANY
'''
  'DEFINE':
    'prefix': 'DEFINE'
    'body':'''
DEFINE
  def
TYPE
  POW(INTEGER)
VALUE
  UNION(x).(x : 1..10 | {x + x })
END//DEFINE
'''
  'RULE_SUCCESS':
    'prefix': 'RULE_SUCCESS'
    'body': 'RULE_SUCCESS'
  'RULE_FAIL':
    'prefix': 'RULE_FAIL'
    'body': 'RULE_FAIL'
  'DEPENDS_ON_RULE':
    'prefix': 'DEPENDS_ON_RULE'
    'body': 'DEPENDS_ON_RULE ${1:rule}'
  'DEPENDS_ON_COMPUTATION':
    'prefix': 'DEPENDS_ON_COMPUTATION'
    'body': 'DEPENDS_ON_COMPUTATION ${1:rule}'
  'SUCCEEDED_RULE':
    'prefix': 'SUCCEEDED_RULE'
    'body': 'SUCCEEDED_RULE(${1:rule1})'
  'SUCCEEDED_RULE_ERROR_TYPE':
    'prefix': 'SUCCEEDED_RULE_ERROR_TYPE'
    'body': 'SUCCEEDED_RULE_ERROR_TYPE(${1:rule1},${2:2})'
  'FAILED_RULE':
    'prefix': 'FAILED_RULE'
    'body': 'FAILED_RULE(${1:rule1})'
  'FAILED_RULE_ERROR_TYPE':
    'prefix': 'FAILED_RULE_ERROR_TYPE'
    'body': 'FAILED_RULE_ERROR_TYPE(${1:rule1},${2:2})'
  'NOT_CHECKED_RULE':
    'prefix': 'NOT_CHECKED_RULE'
    'body': 'NOT_CHECKED_RULE(${1:rule1})'
  'DISABLED_RULE':
    'prefix': 'DISABLED_RULE'
    'body': 'DISABLED_RULE(${1:rule1})'
  'REFERENCES':
    'prefix': 'REFERENCES'
    'body': 'REFERENCES\n\t${1:otherRulesMachine}'
  'ACTIVATION':
    'prefix': 'ACTIVATION'
    'body': 'ACTIVATION ${1:predicate}'
  'ERROR_TYPES':
    'prefix': 'ERROR_TYPES'
    'body': 'ERROR_TYPES ${1:2}'
  'ERROR_TYPE':
    'prefix': 'ERROR_TYPE'
    'body': 'ERROR_TYPE ${1:2}'
